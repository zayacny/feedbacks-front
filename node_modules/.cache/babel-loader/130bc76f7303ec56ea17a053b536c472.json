{"remainingRequest":"/home/developer/BootstrapVue/Feedbacks/feedbacks-frontend/node_modules/babel-loader/lib/index.js!/home/developer/BootstrapVue/Feedbacks/feedbacks-frontend/node_modules/eslint-loader/index.js??ref--13-0!/home/developer/BootstrapVue/Feedbacks/feedbacks-frontend/src/store/index.js","dependencies":[{"path":"/home/developer/BootstrapVue/Feedbacks/feedbacks-frontend/src/store/index.js","mtime":1612166646437},{"path":"/home/developer/BootstrapVue/Feedbacks/feedbacks-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1605783424914},{"path":"/home/developer/BootstrapVue/Feedbacks/feedbacks-frontend/node_modules/babel-loader/lib/index.js","mtime":1605783424534},{"path":"/home/developer/BootstrapVue/Feedbacks/feedbacks-frontend/node_modules/eslint-loader/index.js","mtime":1605783425198}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/developer/BootstrapVue/Feedbacks/feedbacks-frontend/src/store/index.js"],"names":["Vue","Vuex","BootstrapVue","IconsPlugin","axios","crypto","require","accessToken","window","localStorage","getItem","defaults","headers","common","use","Store","state","rowsFeedbacks","token","login","mutations","setFeedbacks","data","console","log","setToken","setLogin","actions","getFeedbacks","commit","get","writeFeedback","feedback","post","savePhoto","fileImg","formData","FormData","append","saveUser","name","userName","updateUser","payload","hesh","createHash","update","pass","hashPass","digest","email","status","saveCompany","orgName","address","logIn","userData","setItem","logOut","regIn","forgotPass","fetchEmailUser","getters","getCountFeedbacks","length","getToken"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport { BootstrapVue, IconsPlugin } from 'bootstrap-vue'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'bootstrap-vue/dist/bootstrap-vue.css'\nimport axios from 'axios'\n\nconst crypto = require('crypto')\nconst accessToken = window.localStorage.getItem('accessToken')\naxios.defaults.headers.common['reqToken'] = accessToken\n\nVue.use(BootstrapVue)\nVue.use(IconsPlugin)\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    rowsFeedbacks: [],\n    token: '',\n    login: false\n  },\n\n  mutations: {\n    setFeedbacks (state, data) {\n      state.rowsFeedbacks = data\n      console.log('mutation setFeedbacls commit!  ')\n    },\n    setToken (state) {\n      state.token = window.localStorage.getItem('accessToken')\n    },\n    setLogin (state) {\n      state.login = true\n    }\n  },\n\n  actions: {\n    // getFeedbacks GET\n    async getFeedbacks ({ commit }) {\n      const { data } = await axios.get('http://localhost:3000/allfeedbacks')\n      commit('setFeedbacks', data)\n    },\n\n    // write feedback POST\n    async writeFeedback (state, feedback) {\n      const { data } = await axios.post('http://localhost:3000/feedbacks', { feedback })\n      console.log('additionFeedback() done : ', feedback)\n      return data\n    },\n\n    // save photo POST\n    async savePhoto (state, fileImg) {\n      var formData = new FormData()\n      formData.append('fileImg', fileImg)\n      const { data } = await axios.post('http://localhost:3000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      })\n      return data\n    },\n\n    // save User  POST\n    async saveUser (state, feedback) {\n      const { data } = await axios.post('http://localhost:3000/users', { name: feedback.userName })\n      return data\n    },\n\n    // update user PUT\n    async updateUser (state, payload) {\n      const hesh = crypto.createHash('sha1')\n      hesh.update(payload.pass)\n      const hashPass = hesh.digest('hex')\n      const { data } = await axios.post('http://localhost:3000/users/upd', { pass: hashPass, email: payload.email })\n      return data.status\n    },\n\n    // save Company POST\n    async saveCompany (state, feedback) {\n      const { data } = await axios.post('http://localhost:3000/company', { name: feedback.orgName, address: feedback.address })\n      return data\n    },\n\n    // log in POST\n    async logIn ({ commit }, userData) {\n      const hesh = crypto.createHash('sha1')\n      hesh.update(userData.pass)\n      const hashPass = hesh.digest('hex')\n      const { data } = await axios.post('http://localhost:3000/login', { name: userData.name, email: userData.email, pass: hashPass })\n\n      if (data) {\n        window.localStorage.setItem('accessToken', `${data.accessToken}`)\n        commit('setToken')\n        commit('setLogin')\n        return true\n      }\n      return false\n    },\n\n    // log out\n    async logOut (state) {\n      state.login = false\n      window.localStorage.setItem('accessToken', '')\n      return true\n    },\n\n    // registration POST\n    async regIn (state, userData) {\n      const hesh = crypto.createHash('sha1')\n      hesh.update(userData.pass)\n      const hashPass = hesh.digest('hex')\n      const { data } = await axios.post('http://localhost:3000/user', { name: userData.name, email: userData.email, pass: hashPass })\n      return data\n    },\n\n    // recover password POST\n    async forgotPass (state, email) {\n      const { data } = await axios.post('http://localhost:3000/recover', { email: email })\n      return data\n    },\n\n    // fetch email for recover\n    async fetchEmailUser (state, token) {\n      const { data } = await axios.post('http://localhost:3000/email', { token })\n      return data\n    }\n  },\n\n  getters: {\n    getCountFeedbacks (state) {\n      return state.rowsFeedbacks.length\n    },\n    getFeedbacks (state) {\n      return state.rowsFeedbacks\n    },\n    getToken (state) {\n      return state.token\n    }\n  }\n})\n"]}]}